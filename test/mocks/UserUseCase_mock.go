// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"DucTran999/di-with-go/internal/entity"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

type UserUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *UserUseCase) EXPECT() *UserUseCase_Expecter {
	return &UserUseCase_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type UserUseCase
func (_mock *UserUseCase) CreateUser(ctx context.Context, username string) (*entity.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *entity.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserUseCase_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserUseCase_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserUseCase_Expecter) CreateUser(ctx interface{}, username interface{}) *UserUseCase_CreateUser_Call {
	return &UserUseCase_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, username)}
}

func (_c *UserUseCase_CreateUser_Call) Run(run func(ctx context.Context, username string)) *UserUseCase_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserUseCase_CreateUser_Call) Return(user *entity.User, err error) *UserUseCase_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *UserUseCase_CreateUser_Call) RunAndReturn(run func(ctx context.Context, username string) (*entity.User, error)) *UserUseCase_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}
