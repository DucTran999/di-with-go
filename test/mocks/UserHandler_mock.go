// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewUserHandler creates a new instance of UserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserHandler {
	mock := &UserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserHandler is an autogenerated mock type for the UserHandler type
type UserHandler struct {
	mock.Mock
}

type UserHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *UserHandler) EXPECT() *UserHandler_Expecter {
	return &UserHandler_Expecter{mock: &_m.Mock}
}

// RegisterUser provides a mock function for the type UserHandler
func (_mock *UserHandler) RegisterUser(ctx context.Context, username string) {
	_mock.Called(ctx, username)
	return
}

// UserHandler_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type UserHandler_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserHandler_Expecter) RegisterUser(ctx interface{}, username interface{}) *UserHandler_RegisterUser_Call {
	return &UserHandler_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, username)}
}

func (_c *UserHandler_RegisterUser_Call) Run(run func(ctx context.Context, username string)) *UserHandler_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserHandler_RegisterUser_Call) Return() *UserHandler_RegisterUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserHandler_RegisterUser_Call) RunAndReturn(run func(ctx context.Context, username string)) *UserHandler_RegisterUser_Call {
	_c.Run(run)
	return _c
}
